<?php
defined('_JEXEC') or die;

class Railway2ModelYandexrasp extends JModelLegacy
{
	public $offset = 0;

	public function __construct(array $config = array())
	{
		parent::__construct($config);
	}

	public static function getInstance($type, $prefix = '', $config = array())
	{
		return parent::getInstance($type, $prefix, $config); // TODO: Change the autogenerated stub
	}

	/* Запрос к API */
	public function query()
	{
		$url    = $this->getURL();
		$result = json_decode(file_get_contents($url));

		return $result;
	}

	/* Получаем URL для запроса */
	public function getURL()
	{
		$options                = JComponentHelper::getParams('com_railway2');
		$this->params           = array();
		$apiUrl                 = $options->get('yandex-rasp-api-url');
		$this->params['apikey'] = $options->get('yandex-rasp-api-key');
		$this->params['format'] = $options->get('yandex-rasp-api-format');
		$this->params['lang']   = $options->get('yandex-rasp-api-lang');
		$url                    = $apiUrl . '/' . $this->getMethod() . '/?' . $this->getQuery();

		return $url;
	}

	/* Получаем адресную строку для URL */
	private function getQuery()
	{
		switch (JFactory::getApplication()->input->getString('view'))
		{
			case 'station':
			{
				$this->params['station']         = $this->esr;
				$this->params['transport_types'] = 'suburban';
				$this->params['direction']       = $this->dir;
				$this->params['system']          = 'esr';
				$this->params['show_systems']    = 'all';
				$this->params['offset']          = $this->offset;
				$this->params['date']            = Railway2HelperCodes::getDateFromUrl();
				break;
			}
			case 'thread':
			{
				$this->params['uid']          = $this->uid;
				$this->params['show_systems'] = 'all';
				$this->params['date']         = Railway2HelperCodes::getDateFromUrl();
				break;
			}
			default:
			{
				return false;
			}
		}

		return http_build_query($this->params);
	}

	/* Получаем метод для запроса */
	private function getMethod()
	{
		switch (JFactory::getApplication()->input->getString('view'))
		{
			case 'station':
			{
				return 'schedule';
				break;
			}
			case 'thread':
			{
				return 'thread';
				break;
			}
		}
	}

	public function setUID($uid)
	{
		$this->uid = $uid;
	}

	public function setESR($code)
	{
		if (!intval($code))
		{
			return false;
		}
		$this->esr = $code;

		return true;
	}

	public function setDirection($dir)
	{
		$this->dir = $dir;
	}

	public function getESR()
	{
		return $this->esr;
	}

	private $esr, $uid, $date, $params, $dir;
}